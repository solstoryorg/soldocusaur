"use strict";(self.webpackChunksolstory=self.webpackChunksolstory||[]).push([[289],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=n,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return r?o.createElement(y,i(i({ref:t},u),{},{components:r})):o.createElement(y,i({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4395:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var o=r(7462),n=r(3366),a=(r(7294),r(3905)),i=["components"],s={sidebar_position:1},l="Reading and Writing",p={unversionedId:"usage/intro",id:"usage/intro",title:"Reading and Writing",description:"This section focuses on how to use the Solstory API as a developer, focusing",source:"@site/docs/usage/intro.md",sourceDirName:"usage",slug:"/usage/intro",permalink:"/soldocusaur/usage/intro",editUrl:"https://github.com/solstoryorg/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/soldocusaur/"},next:{title:"For NFT Creators",permalink:"/soldocusaur/usage/creator"}},u={},c=[{value:"Imports",id:"imports",level:2},{value:"Initialize Your Writer Program",id:"initialize-your-writer-program",level:2},{value:"Append an Item",id:"append-an-item",level:2},{value:"Get a story head",id:"get-a-story-head",level:2},{value:"Retrieve a story",id:"retrieve-a-story",level:2}],m={toc:c};function d(e){var t=e.components,r=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reading-and-writing"},"Reading and Writing"),(0,a.kt)("p",null,"This section focuses on how to use the Solstory API as a developer, focusing\nspecifically on the JS API. (other APIs may be forthcoming, but aren't on the\nimmediate roadmap. You can also interact with solstory the same way you would any\nanchor/solana program). You can find more details on the API on the ",(0,a.kt)("a",{parentName:"p",href:"https://solstoryorg.github.io/solstory"},"typedoc"),"."),(0,a.kt)("p",null,"Actually using the API is dead simple:"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: these examples generally avoid optional parameters, check out the linked\ndocs for a full explanation of things you can configure.")),(0,a.kt)("h2",{id:"imports"},"Imports"),(0,a.kt)("p",null,"Everything in the following examples should work with the following library imports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import fs from 'fs';\nimport path from 'path';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { Wallet, Provider, } from '@project-serum/anchor';\nimport { SolstoryAPI, SolstoryItemType } from '@solstory/api';\n")),(0,a.kt)("p",null,"For constants:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const ANCHOR_WALLET = "<full filepath to your anchor wallet, ideally stored as an environmental variable an accessed via process.env.ANCHOR_WALLET>";\nconst ENDPOINT = "<typical solana endpoints you\'d give anchor>"\nconst BUNDLR_ENDPOINT = "devnet"|"mainnet"; //Bundlr devnet will operate off solana devnet, for local we recommend using devnet and funding your local wallet with airdrop on devnet\n\n## Initialize The API\nYou initialize the API almost exactly like a regular anchor program,\nexcept for a few extra options and the  need to configure the\nbundlr integration\u2013bundlr uploads json to ARWeave, which lets the\nsolstory api handle even the basic web uploading for you.\n\n```typescript\n//we initialize this the same we would an anchor api\nconst connection = new Connection(ENDPOINT);\nconst raw = fs.readFileSync(path.resolve(ANCHOR_WALLET), \'utf8\');\nconst wallet = new Wallet(Keypair.fromSecretKey(Buffer.from(JSON.parse(raw))));\nconst provider = new Provider(connection, wallet, { commitment: \'confirmed\' });\nconst solstoryApi = new SolstoryAPI({}, provider);\nsolstoryApi.configureBundlrServer(Buffer.from(JSON.parse(raw)), BUNDLR_ENDPOINT);\n')),(0,a.kt)("h2",{id:"initialize-your-writer-program"},"Initialize Your Writer Program"),(0,a.kt)("p",null,"You only need to do this once. ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://solstoryorg.github.io/solstory/classes/writer.SolstoryServerWriterAPI.html#createWriterMetadata"},"createWriterMetadata typedoc"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'solstoryApi.writer.createWriterMetadata({\n        writerKey: <your public key>,\n        label: <name of your writer program>,\n        description: <description of your writer program>,\n        url: <your homepage>,\n        logo: <url for your logo>,\n        baseUrl: <baseurl if you\'re not using arweave storage>,\n        apiVersion: 1,\n        visible: <whether you want people to see this (probably true)>,\n        cdn: "",\n        metadata: JSON.stringify({}),\n        hasExtendedMetadata: false,\n    });\n')),(0,a.kt)("h2",{id:"append-an-item"},"Append an Item"),(0,a.kt)("p",null,"Appending from there takes a single call. ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://solstoryorg.github.io/solstory/classes/writer.SolstoryServerWriterAPI.html#appendItemCreate"},"appendItemCreate typedoc"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'itemObject = {\n        type: SolstoryItemType.Item,\n        display: {\n            label: "Item title/label",\n            description: "Text Description",\n            helpText: "Alt Text",\n            img: "<img url>"\n        },\n        data: {\n            extra_data: {},\n        }\n    };\nsolstoryApi.writer.appendItemCreate(new PublicKey(nftId), itemObject);\n')),(0,a.kt)("p",null,"That's it. Solstory will handle the uploading, the hashing, the linking, and the\nverification for you, in the background. There's even the typical optional\ninputs for conformation certainty."),(0,a.kt)("h2",{id:"get-a-story-head"},"Get a story head"),(0,a.kt)("p",null,"If you're trying to display stories for an NFT, you'll probably want to get all\nof them. ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://solstoryorg.github.io/solstory/classes/common.SolstoryClientAPI.html#getHeadsForNFT"},"getHeadsForNFT typedoc"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"heads = await solstoryApi.common.getHeadsForNFT(mintKey);\n")),(0,a.kt)("p",null,"If you already know the ",(0,a.kt)("inlineCode",{parentName:"p"},"writerKey")," of the story you want to display, you can actually\nskip straight to the next step."),(0,a.kt)("h2",{id:"retrieve-a-story"},"Retrieve a story"),(0,a.kt)("p",null,"If you've skipped the previous step because you already know your ",(0,a.kt)("inlineCode",{parentName:"p"},"writerKey"),"\nyou don't need to deal with heads at all. Just go straight to: ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://solstoryorg.github.io/solstory/classes/common.SolstoryClientAPI.html#getStory"},"getStory typedoc"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"story = await solstoryApi.common.getStory(writerKey, mintKey);\n")),(0,a.kt)("p",null,"If you ",(0,a.kt)("em",{parentName:"p"},"have")," gotten a head first, just use this. ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"https://solstoryorg.github.io/solstory/classes/common.SolstoryClientAPI.html#getStoryFromHead"},"getStoryFromHead typedoc"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"story = await solstoryApi.common.getStoryFromHead(head);\n")))}d.isMDXComponent=!0}}]);