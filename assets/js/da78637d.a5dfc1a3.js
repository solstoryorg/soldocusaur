"use strict";(self.webpackChunksolstory=self.webpackChunksolstory||[]).push([[890],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(r),h=a,m=p["".concat(l,".").concat(h)]||p[h]||c[h]||i;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6925:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={sidebar_position:3},l="WriterHead",d={unversionedId:"standard/writerhead",id:"standard/writerhead",title:"WriterHead",description:"The WriterHead is the second on-chain PDA used by Solstory.",source:"@site/docs/standard/writerhead.md",sourceDirName:"standard",slug:"/standard/writerhead",permalink:"/soldocusaur/standard/writerhead",editUrl:"https://github.com/solstoryorg/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/standard/writerhead.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Metadata",permalink:"/soldocusaur/standard/metadata"},next:{title:"Items",permalink:"/soldocusaur/standard/items"}},u={},c=[{value:"Updating",id:"updating",level:2}],p={toc:c};function h(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"writerhead"},"WriterHead"),(0,i.kt)("p",null,"The WriterHead is the second on-chain PDA used by Solstory.\nThis is a mostlly internal data structure, used to locate the first off-chain\nitem. It's essentially a stub of an item, it contains no writer data, but\ndoes contain information for locating the next (first) item in the linked list\nas well as the information required to verify it. This structure gets updated\nevery time an item is appended, and the rules around updating it are what enforce\nthe cryptographical verification promises that Solstory delivers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"authorized")," a ",(0,i.kt)("inlineCode",{parentName:"li"},"bool")," that means that the NFT creator has approved this chain.\nThere's no similar flag for the writer, since if the writer doesn't\napprove a chain it'll just be empty"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"visibilityIndex")," this ",(0,i.kt)("inlineCode",{parentName:"li"},"i8")," serves a dual purpose, both allowing the NFT\nholder to override external permissioning. First, a value of ",(0,i.kt)("inlineCode",{parentName:"li"},"-1")," will hide a\nstory from an NFT. A value of ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," will leave everything as default (and is the\ndefault value). A value of ",(0,i.kt)("inlineCode",{parentName:"li"},"1+"),' signifies a holder both prioritizing how an\nstory should be displayed (think z-index in css) and, if the story wouldn\'t be\ndisplay otherwise, "aftermarket" attaching the story and overriding other\npermissions. See ',(0,i.kt)("a",{parentName:"li",href:"/soldocusaur/standard/permissioning"},"the permissions page")," for more info."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"accessType")," determins how ",(0,i.kt)("inlineCode",{parentName:"li"},"objId")," should be used to locate a resource."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"objId"),"is 32 bytes that, together with ",(0,i.kt)("inlineCode",{parentName:"li"},"accessType")," allow a client to locate\nwhere the first block is located."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currentHash")," this is ",(0,i.kt)("inlineCode",{parentName:"li"},"h(itemhash, previtem, timestamp)")," of the first node.\nSee ",(0,i.kt)("a",{parentName:"li",href:"/soldocusaur/standard/items"},"the items standard")," or either the rust or JS implementations for reference.")),(0,i.kt)("h2",{id:"updating"},"Updating"),(0,i.kt)("p",null,"When someone appends an item to Solstory, the api calculates a new current hash. This\nhash includes both a timestamp and the previous current hash, as well as a data hash.\nThose three components get uploaded as part of the update process, and the Solstory\nprogram verifies them. Fooling this requires finding a sha256 collision, which is\nboth a well studied problem and extremely difficult\u2013exactly what we want in a\nsecurity schema."))}h.isMDXComponent=!0}}]);