"use strict";(self.webpackChunksolstory=self.webpackChunksolstory||[]).push([[270],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(r),h=a,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return r?n.createElement(m,o(o({ref:t},l),{},{components:r})):n.createElement(m,o({ref:t},l))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},966:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={sidebar_position:4},c="Security",u={unversionedId:"architecture/security",id:"architecture/security",title:"Security",description:"A primary design goal of Solstory is to ensure that records added to NFTs can be",source:"@site/docs/architecture/security.md",sourceDirName:"architecture",slug:"/architecture/security",permalink:"/soldocusaur/architecture/security",editUrl:"https://github.com/solstoryorg/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture/security.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"PDAs",permalink:"/soldocusaur/architecture/pdas"},next:{title:"Updating",permalink:"/soldocusaur/architecture/mechanics"}},l={},p=[{value:"Tamper Evident vs Tamper Proof",id:"tamper-evident-vs-tamper-proof",level:2},{value:"Ensuring Tamper Evidence",id:"ensuring-tamper-evidence",level:2}],d={toc:p};function h(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"security"},"Security"),(0,i.kt)("p",null,"A primary design goal of Solstory is to ensure that records added to NFTs can be\nused by third parties to reliably ascertain information about that NFT\u2013whether that's\nan item that might be used in a third party video game, or a signature or event token\nthat makes an NFT more valuable."),(0,i.kt)("p",null,'Solstory is designed to do two things: ensure that only the writer program can\nwrite to its story, and ensure that those records cannot be tampered with later\nwithout detection. That makes Solstory "tamper evident".'),(0,i.kt)("h2",{id:"tamper-evident-vs-tamper-proof"},"Tamper Evident vs Tamper Proof"),(0,i.kt)("p",null,"Given that information is stored off chain, it's impossible for us to verify that\ninformation in detail with an onchain program. Since we can't verify anything\nabout the data that gets uploaded to something immutable like ARWeave, we might as well\nallow that data to be uploaded to any medium and gain resiliency to things like\nnetworks going down. Since we can't verify information off-chain, Solstory\ncannot be tamper ",(0,i.kt)("em",{parentName:"p"},"proof"),". We can't stop someone from uploading incorrect data\nto ARWeave."),(0,i.kt)("p",null,"But we can make it impossible to hide after the fact."),(0,i.kt)("p",null,"(There are some interesting ideas about using a third party oracle that ",(0,i.kt)("em",{parentName:"p"},"can"),"\ninteract with Solana, but this would increase complexity by orders of magnitude\nand for that reason are unsurprisingly the places where most cross-chain bridges\nget exploited. It's also unnecessary, since every writer program gets their\nown chain, and therefore we can make the result of tamper evidence the same\nas the result of a blocking tamper proof: we just ignore the incorrect data and pretend\nit doesn't exist.)"),(0,i.kt)("h2",{id:"ensuring-tamper-evidence"},"Ensuring Tamper Evidence"),(0,i.kt)("p",null,"Solstory ensures that all data is tamper evident by storing the first item's\nhash on Solana. This hash is a combination of a hash of the data in the item,\nthe timestamp of the item, and the previous item's hash. When someone tries to append\na new item, we calculate the hash of the combined item + timestamp + previous hash."),(0,i.kt)("p",null,"Attacking this to change the history (generating ",(0,i.kt)("inlineCode",{parentName:"p"},"prevHashMalicious"),") would\nrequire us to find a ",(0,i.kt)("inlineCode",{parentName:"p"},"dataHashMalicious")," so that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"h(prevHash + timestamp + dataHash) = h(prevHashMalicious + timestamp + dataHashMalicious)\n")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"h(prevHash + timestamp + dataHash)")," is the complete hash stored in the PDA.\nThis reduces to finding a sha256 collision, which is currently considered\npractically impossible."))}h.isMDXComponent=!0}}]);