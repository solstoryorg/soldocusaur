"use strict";(self.webpackChunksolstory=self.webpackChunksolstory||[]).push([[545],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(r),f=a,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return r?n.createElement(h,i(i({ref:t},l),{},{components:r})):n.createElement(h,i({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1725:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],s={sidebar_position:7},c="Terms",u={unversionedId:"terms",id:"terms",title:"Terms",description:"Story - A series of items of data attached to an NFT by a single writer.",source:"@site/docs/terms.md",sourceDirName:".",slug:"/terms",permalink:"/terms",editUrl:"https://github.com/solstoryorg/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/terms.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Costs & Fee Structure",permalink:"/costs_and_fees"},next:{title:"Verified Programs",permalink:"/verified"}},l={},p=[],d={toc:p};function f(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"terms"},"Terms"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Story")," - A series of items of data attached to an NFT by a single writer."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hashchain")," - A data structure created by iteratively applying a hash function\nto the output of previous iterations of the hash function. In Solstory\u2019s case\nthere\u2019s additional data added to each node. So instead of h(h(h(h(x)))) it\u2019s\nh(data_4+h(data_3+h(data_2+h(data_1)))). This lets us validate the data AND\nprevious hash just by knowing the current hash. Applied recursively it lets us\nvalidate the entire chain from the most recent hash."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Creator")," - The entity that created the NFT, understood in the Solstory world\nas the pubkey(s) with update privileges in the Metaplex metadata (specifically\nthe on-chain pda) for the given NFT."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Writer")," - A public key identifying either an on or off chain program writing\ndata to NFTs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Item")," - An individual piece of data attached to an NFT as part of a story."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Node")," - Basically a block but in a hash chain."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"WriterHead")," - The Solana PDA managing a single story. Enforces hash chain\nconstraints, points to data location, and allows for data validation."))}f.isMDXComponent=!0}}]);