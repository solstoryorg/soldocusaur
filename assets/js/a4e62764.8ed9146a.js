"use strict";(self.webpackChunksolstory=self.webpackChunksolstory||[]).push([[684],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),h=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=h(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=h(n),d=r,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var h=2;h<i;h++)o[h]=n[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},658:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return h},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:3},c="Why a Hash Chain",h={unversionedId:"architecture/hashchain",id:"architecture/hashchain",title:"Why a Hash Chain",description:"The trick behind keeping a solstory story constant space is storing the data off",source:"@site/docs/architecture/hashchain.md",sourceDirName:"architecture",slug:"/architecture/hashchain",permalink:"/soldocusaur/architecture/hashchain",editUrl:"https://github.com/solstoryorg/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture/hashchain.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/soldocusaur/architecture/basicarch"},next:{title:"PDAs",permalink:"/soldocusaur/architecture/pdas"}},l={},u=[{value:"Validation",id:"validation",level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"why-a-hash-chain"},"Why a Hash Chain"),(0,i.kt)("p",null,"The trick behind keeping a solstory story constant space is storing the data off\nchain. The challenge here is maintaining solana's verifiability characteristics\nwhile moving the data off, especially when we want data to be storable on\nmutable mediums like S3."),(0,i.kt)("p",null,"The solution for this, is a hash chain. This is, in effect, a greatly simplified\nblockchain, but simplified enough that we don't need dedicated clients to run it,\nand kept as appendable by only a single author, so we don't need to deal with\nspam, consensus issues, etc."),(0,i.kt)("p",null,"As part of that simplification, instead of using an arbitrarily large merkle tree\nwe use one with just five components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a link to the previous item (or block, in blockchain terms)"),(0,i.kt)("li",{parentName:"ul"},"a hash of the previous item's hash, timestamp, and previous item hash,"),(0,i.kt)("li",{parentName:"ul"},"a hash of the current item,"),(0,i.kt)("li",{parentName:"ul"},"a timestamp"),(0,i.kt)("li",{parentName:"ul"},"the actual data")),(0,i.kt)("p",null,"The head of the blockchain, stored on solana itself, stores only the first\ntwo\u2013a link to the next item in the list and a hash of that item's hash,\ntimestamp, and prev-hash. This is what keeps the onchain footprint so small."),(0,i.kt)("p",null,"Actual items also store the data the merkle tree is verifying, in this case\na single appended record to the chain."),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"For the sake of resilience, it's important to note that the pointers to where data\nis located is ",(0,i.kt)("em",{parentName:"p"},"not")," verified in any of the hashes. So even if arweave or an s3\nbucket or any other data location goes down, the entire chain can still be\nreconstructed. One consequence of this is that verifying a chain's honesty\nrequires both a verification that the hashes all match up (including recalculating\nthat ",(0,i.kt)("inlineCode",{parentName:"p"},"hash(itemhash, timestamp, previtemhash) == hash"),") one must also verify for\neach item that ",(0,i.kt)("inlineCode",{parentName:"p"},"h(raw_item)==itemhash"),". For details on what this looks like in\nthe actual data structure standard, see ",(0,i.kt)("a",{parentName:"p",href:"/soldocusaur/standard/items"},"standard/items"),"."))}d.isMDXComponent=!0}}]);